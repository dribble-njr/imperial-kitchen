generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)

  kitchen   Kitchen @relation(fields: [kitchenId], references: [id], onDelete: Cascade)
  kitchenId Int

  dishes Dish[]

  @@index([kitchenId])
}

model Dish {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  image       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)

  kitchen   Kitchen @relation(fields: [kitchenId], references: [id], onDelete: Cascade)
  kitchenId Int

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  tags TagsOnDishes[]

  @@index([kitchenId])
  @@index([categoryId])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  phone     String?  @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  kitchens KitchensOnUsers[]
}

model Kitchen {
  id         Int      @id @default(autoincrement())
  name       String
  inviteCode String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isActive   Boolean  @default(true)

  users      KitchensOnUsers[]
  categories Category[]
  dishes     Dish[]
}

model KitchensOnUsers {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  kitchen   Kitchen  @relation(fields: [kitchenId], references: [id], onDelete: Cascade)
  kitchenId Int
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  @@id([userId, kitchenId])
  @@index([userId])
  @@index([kitchenId])
}

enum Role {
  ADMIN
  MEMBER
}

enum TagType {
  recipe
  dish
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(10)
  type      TagType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dishes TagsOnDishes[]

  @@index([name])
  @@index([type])
}

model TagsOnDishes {
  dish      Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId    Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([dishId, tagId])
  @@index([dishId])
  @@index([tagId])
}
